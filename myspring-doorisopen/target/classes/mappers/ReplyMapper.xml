<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="org.doorisopen.myspring.Board.ReplyMapper">

	<!-- 댓글 등록 -->
	<insert id="ReplyCreate" parameterType="ReplyVO">
	INSERT INTO
	reply 
	(
		boardIdx,
		replyContent,
		replyWriter,
		replyWriteDate,
		replyModifyDate
	) VALUES (
		#{boardIdx},
		#{replyContent},
		#{replyWriter},
		now(),
		now()
	)
	</insert>
	
    <!-- 댓글 리스트 -->
    <select id="ReplyRead" resultType="ReplyVO">
 	 <![CDATA[
		SELECT
			*
		FROM
			reply
		WHERE
			boardIdx = #{boardIdx}
		AND
			enabled = '1'
		ORDER BY 
			replyWriteDate desc
 	 ]]> 
 	</select>
 	
 	
    <!-- 댓글 수정 -->
    <update id="ReplyUpdate">
    	UPDATE
    		reply
    	SET
    		replyContent = #{replyContent}
			, replyModifier = #{replyModifier}
			, replyModifyDate = now()
		WHERE
			replyIdx = #{replyIdx}
 	</update>
 	
    <!-- 댓글 삭제 -->
    <delete id="ReplyDelete">
    	UPDATE
    		reply
    	SET
    		enabled = '0'
    	WHERE
    		replyIdx = #{replyIdx}
 	</delete>
 	
 	
 	<!-- 대댓글 등록 -->
	<insert id="replyToReply" parameterType="ReplyVO">
	INSERT INTO
	reply 
	(
		boardIdx,
		replyContent,
		replyWriter,
		replyWriteDate,
		replyModifyDate
	) VALUES (
		#{boardIdx},
		#{replyContent},
		#{replyWriter},
		now(),
		now()
	)
	</insert>
 	<!-- 
<select id="ReplyReadProcedure" statementType="CALLABLE" parameterType="ReplyVO">
<![CDATA[
CREATE FUNCTION start_with_connect_by(value INT) RETURNS INT
NOT DETERMINISTIC
READS SQL DATA
BEGIN
        DECLARE _id INT;
        DECLARE _parent INT;
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET @id = NULL;

        SET _parent = @id;
        SET _id = -1;

        IF @id IS NULL THEN
                RETURN NULL;
        END IF;

        LOOP
                SELECT  MIN(replyIdx)
                INTO    @id
                FROM    reply
                WHERE   replyParent = _parent
                        AND group_idx > _id;
                IF @id IS NOT NULL OR _parent = @start_with THEN
                        SET @level = @level + 1;
                        RETURN @id;
                END IF;
                SET @level := @level - 1;
                SELECT  group_idx, parent_idx
                INTO    _id, _parent
                FROM    reply
                WHERE   group_idx = _parent;
        END LOOP;
END
]]> 
</select>
 -->
</mapper>